// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_POINTING_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

// https://zmk.dev/docs/development/hardware-integration/soft-off-setup?advanced-methods=wakeup&kscan-type=dkscan

/ {
    keys {
        compatible = "gpio-keys";

        soft_off_gpio_key: soft_off_gpio_key { gpios = <&gpio1 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; };
    };

    wakeup_scan: wakeup_scan {
        compatible = "zmk,kscan-gpio-direct";
        input-keys = <&soft_off_gpio_key>;
        wakeup-source;
    };

    side_band_behavior_triggers: side_band_behavior_triggers {
        compatible = "zmk,kscan-sideband-behaviors";
        kscan = <&wakeup_scan>;
        auto-enable;
        wakeup-source;
    };

    soft_off_wakers {
        compatible = "zmk,soft-off-wakeup-sources";
        wakeup-sources = <&wakeup_scan>;
    };
};

/ {
    // chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        switch_lang: switch_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp LEFT_SHIFT>;
            label = "SWITCH_LANG";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_colemak {
            display-name = "DEFAULT";
            bindings = <
  &kp Q               &kp W           &kp F         &kp P             &kp B        &kp J        &kp L              &kp U        &kp Y            &kp SQT
  &ht LEFT_COMMAND A  &ht LEFT_ALT R  &ht RCTRL S   &ht LEFT_SHIFT T  &kp G        &kp M        &ht RIGHT_SHIFT N  &ht RCTRL E  &ht RIGHT_ALT I  &ht RIGHT_COMMAND O
  &kp Z               &kp X           &kp C         &kp D             &kp V        &kp K        &kp H              &kp COMMA    &kp DOT          &ht SEMICOLON SLASH
                                      &lt 2 ESCAPE  &lt 3 SPACE       &lt 4 TAB    &lt 6 ENTER  &lt 5 BACKSPACE    &lt 7 DEL
            >;
        };

        base_qwerty {
            display-name = "DEFAULT";
            bindings = <
  &kp Q               &kp W           &kp E         &kp R             &kp T        &kp Y        &kp U              &kp I        &ht LEFT_BRACKET O  &ht RIGHT_BRACKET P
  &ht LEFT_COMMAND A  &ht LEFT_ALT S  &ht RCTRL D   &ht LEFT_SHIFT F  &kp G        &kp H        &ht RIGHT_SHIFT J  &ht RCTRL K  &ht RIGHT_ALT L     &ht RIGHT_COMMAND SINGLE_QUOTE
  &kp Z               &kp X           &kp C         &kp V             &kp B        &kp N        &kp M              &kp COMMA    &kp DOT             &ht SEMICOLON SLASH
                                      &lt 2 ESCAPE  &lt 3 SPACE       &lt 4 TAB    &lt 6 ENTER  &lt 5 BACKSPACE    &lt 7 DEL
            >;
        };

        med {
            bindings = <
  &trans    &trans    &trans     &trans     &trans    &trans      &trans          &kp C_BRI_DEC      &kp C_BRI_UP  &trans
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &trans      &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp C_NEXT
  &trans    &trans    &trans     &trans     &trans    &trans      &trans          &trans             &trans        &trans
                      &trans     &trans     &trans    &kp K_STOP  &kp C_PP        &kp K_MUTE
            >;
        };

        nav {
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans     &bt BT_CLR    &trans     &kp LC(LEFT)  &kp LC(DOWN)   &kp LC(UP)  &kp LC(RIGHT)
  &kp LGUI      &kp LALT      &kp LCTRL     &kp LSHFT  &trans        &kp CAPS   &kp LEFT      &kp DOWN       &kp UP      &kp RIGHT
  &trans        &trans        &trans        &trans     &trans        &kp INS    &kp HOME      &kp PAGE_DOWN  &kp PG_UP   &kp END
                              &trans        &trans     &trans        &kp ENTER  &kp BSPC      &kp DEL
            >;
        };

        mse {
            bindings = <
  &tog 1        &trans    &trans     &trans     &trans    &trans     &trans     &trans     &kp LEFT_BRACKET  &kp RIGHT_BRACKET
  &kp LGUI      &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &trans     &kp RSHFT  &kp RCTRL  &kp RALT          &kp LGUI
  &switch_lang  &trans    &trans     &trans     &trans    &trans     &trans     &trans     &trans            &kp SEMI
                          &trans     &trans     &trans    &mkp RCLK  &mkp LCLK  &mkp MB3
            >;
        };

        num {
            bindings = <
  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &trans  &trans     &trans     &trans    &trans
  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL    &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp LGUI
  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &trans  &trans     &trans     &trans    &trans
                     &kp DOT  &kp N0  &kp MINUS    &trans  &trans     &trans
            >;
        };

        sym {
            bindings = <
  &kp LEFT_BRACE  &kp AMPS         &kp STAR              &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &trans  &trans     &trans     &trans    &trans
  &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS           &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp LGUI
  &ht TILDE SEMI  &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE           &trans  &trans     &trans     &trans    &trans
                                   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER          &trans  &trans     &trans
            >;
        };

        fun {
            bindings = <
  &kp F12  &kp F7  &kp F8             &kp F9     &kp LC(LS(PRINTSCREEN))    &trans  &trans     &trans     &trans    &trans
  &kp F11  &kp F4  &kp F5             &kp F6     &trans                     &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp LGUI
  &kp F10  &kp F1  &kp F2             &kp F3     &kp LS(PAUSE_BREAK)        &trans  &trans     &trans     &trans    &trans
                   &kp K_APPLICATION  &kp SPACE  &kp TAB                    &trans  &trans     &trans
            >;
        };
    };
};
